#!/usr/bin/env python3

import re
import os
import sys
import json
import socket
import getpass
import platform
import subprocess


HOME_DIR = os.path.expanduser("~")
HOSTNAME = socket.gethostname()
OS = platform.system()

COLORS = {
    "RED": "\033[31m",
    "GREEN": "\033[32m",
    "YELLOW": "\033[33m",
    "BLUE": "\033[34m",
    "MAGENTA": "\033[35m",
    "CYAN": "\033[36m",
    "RESET": "\033[0m",
}

bash_file = ".bashrc" if OS == "Linux" else ".zshrc"

def cprint(msg, color=None):
    if color:
        print(f"{COLORS[color]}{msg}{COLORS['RESET']}")
    else:
        print(msg)

def run_cmd(cmd):
    if sys.version_info >= (3, 7):
        # For Python 3.7 and later, use capture_output
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        output = result.stdout
        error = result.stderr
        returncode = result.returncode
    else:
        process = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)
        output, error = process.communicate()
        returncode = process.returncode
    assert returncode == 0, f"Error running command: {cmd}\n{error}"
    return output


def setup_git():
    cprint("Setting up git", "CYAN")
    run_cmd("git config --global user.name 'Shubhashis Roy Dipta'")
    run_cmd("git config --global user.email iamdipta@gmail.com")


def install_libs():
    cprint("Installing libraries", "CYAN")
    # install uv
    run_cmd("curl -LsSf https://astral.sh/uv/install.sh | sh")


def setup_bitwarden():
    cprint("Setting up bitwarden", "CYAN")
    url = dict(
        Linux="https://github.com/bitwarden/cli/releases/download/v1.22.1/bw-linux-1.22.1.zip",
        Darwin="https://github.com/bitwarden/cli/releases/download/v1.22.1/bw-macos-1.22.1.zip"
    )[OS]
    try:
        ################
        # setup env vars
        ################
        # ask for password from user
        if not os.environ.get("BW_CLIENTID", None):
            os.environ["BW_CLIENTID"] = input("Enter bitwarden client id: ")
        if not os.environ.get("BW_CLIENTSECRET", None):
            os.environ["BW_CLIENTSECRET"] = input("Enter bitwarden client secret: ")
        if not os.environ.get("BW_PASSWORD", None):
            os.environ["BW_PASSWORD"] = getpass.getpass("Enter bitwarden password: ")

        ###################
        # install bitwarden
        ###################
        run_cmd(f"cd {HOME_DIR}")
        run_cmd(f"wget {url} -O bw-1.22.1.zip")
        run_cmd("unzip bw-1.22.1.zip")
        run_cmd("chmod +x bw")
        run_cmd(f"mv bw {HOME_DIR}/.local/bin")
        run_cmd("rm bw-1.22.1.zip")

        #################
        # bitwarden login
        #################
        run_cmd("bw login --apikey")
        out = run_cmd("bw unlock --passwordenv BW_PASSWORD")
        pattern = re.compile(r'BW_SESSION="([^"]+)"')
        match = pattern.search(out)
        assert match, "Error in unlocking bitwarden"
        session_token = match.group(1)
        run_cmd(f"bw sync --session {session_token}")
        out = run_cmd(f"bw get item .bashrc --session {session_token}")
        assert len(out) > 0, "Error in getting item from bitwarden"
        obj = json.loads(out)

        ##################
        # bitwarden logout
        ##################
        run_cmd("bw lock")
        run_cmd("bw logout")

        return obj["notes"]
    except Exception as e:
        raise Exception(f"Error in setup_bitwarden: {e}")
    finally:
        # ? forcefully logout even if it errors out
        try:
            run_cmd("bw logout")
        except:
            pass


def clear_env_vars():
    cprint("Clearing environment variables", "CYAN")
    env_vars = ["BW_CLIENTID", "BW_SESSION", "BW_PASSWORD", "BW_CLIENTSECRET"]
    for var in env_vars:
        os.environ.pop(var, None)


def setup_tmux():
    cprint("Setting up tmux", "CYAN")
    try:
        run_cmd(f"tmux source-file {HOME_DIR}/.tmux.conf")
    except Exception as e:
        cprint(f"Error in tmux: {e}", "RED")


def add_to_bash_file(custom_bashrc):
    if not os.path.exists(custom_bashrc):
        cprint(f"Warning: {custom_bashrc} does not exist", "YELLOW")
        return

    #### Source the custom bashrc in the main bashrc
    already_added = False
    with open(f"{HOME_DIR}/{bash_file}", "r") as f:
        for line in f:
            if line.strip() == f". {custom_bashrc}":
                already_added = True

    if not already_added:
        with open(f"{HOME_DIR}/{bash_file}", "a") as f:
            f.write(f"\n. {custom_bashrc}\n")


def setup_bashrc(secret_tokens):
    cprint("Setting up bashrc", "CYAN")
    #############################
    # Add secret tokens to bashrc
    #############################
    secret_bashrc = f"{HOME_DIR}/.bashrc.secret"
    with open(secret_bashrc, "w") as f:
        f.write(secret_tokens)

    ###################
    # Source all bashrc
    ###################
    add_to_bash_file(secret_bashrc)
    add_to_bash_file(f"{HOME_DIR}/.bashrc.{HOSTNAME}")
    add_to_bash_file(f"{HOME_DIR}/.bashrc.common")

    #### Source the main bashrc
    cprint("Please run the following command to source the bashrc", "YELLOW")
    cprint(f". {HOME_DIR}/{bash_file}", "MAGENTA")


def main():
    try:
        setup_git()
        install_libs()
        setup_tmux()
        secret_tokens = setup_bitwarden()
        setup_bashrc(secret_tokens)
        cprint("Bootstrap completed successfully", "GREEN")
    except Exception as e:
        cprint(f"Error: {e}", "RED")
    finally:
        clear_env_vars()


if __name__ == "__main__":
    main()
